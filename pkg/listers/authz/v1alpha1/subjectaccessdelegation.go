/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/joshvanl/k8s-subject-access-delegation/pkg/apis/authz/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubjectAccessDelegationLister helps list SubjectAccessDelegations.
type SubjectAccessDelegationLister interface {
	// List lists all SubjectAccessDelegations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SubjectAccessDelegation, err error)
	// SubjectAccessDelegations returns an object that can list and get SubjectAccessDelegations.
	SubjectAccessDelegations(namespace string) SubjectAccessDelegationNamespaceLister
	SubjectAccessDelegationListerExpansion
}

// subjectAccessDelegationLister implements the SubjectAccessDelegationLister interface.
type subjectAccessDelegationLister struct {
	indexer cache.Indexer
}

// NewSubjectAccessDelegationLister returns a new SubjectAccessDelegationLister.
func NewSubjectAccessDelegationLister(indexer cache.Indexer) SubjectAccessDelegationLister {
	return &subjectAccessDelegationLister{indexer: indexer}
}

// List lists all SubjectAccessDelegations in the indexer.
func (s *subjectAccessDelegationLister) List(selector labels.Selector) (ret []*v1alpha1.SubjectAccessDelegation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubjectAccessDelegation))
	})
	return ret, err
}

// SubjectAccessDelegations returns an object that can list and get SubjectAccessDelegations.
func (s *subjectAccessDelegationLister) SubjectAccessDelegations(namespace string) SubjectAccessDelegationNamespaceLister {
	return subjectAccessDelegationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubjectAccessDelegationNamespaceLister helps list and get SubjectAccessDelegations.
type SubjectAccessDelegationNamespaceLister interface {
	// List lists all SubjectAccessDelegations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SubjectAccessDelegation, err error)
	// Get retrieves the SubjectAccessDelegation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SubjectAccessDelegation, error)
	SubjectAccessDelegationNamespaceListerExpansion
}

// subjectAccessDelegationNamespaceLister implements the SubjectAccessDelegationNamespaceLister
// interface.
type subjectAccessDelegationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubjectAccessDelegations in the indexer for a given namespace.
func (s subjectAccessDelegationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubjectAccessDelegation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubjectAccessDelegation))
	})
	return ret, err
}

// Get retrieves the SubjectAccessDelegation from the indexer for a given namespace and name.
func (s subjectAccessDelegationNamespaceLister) Get(name string) (*v1alpha1.SubjectAccessDelegation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subjectaccessdelegation"), name)
	}
	return obj.(*v1alpha1.SubjectAccessDelegation), nil
}
