// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joshvanl/k8s-subject-access-delegation/pkg/subject_access_delegation/interfaces (interfaces: SubjectAccessDelegation)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/joshvanl/k8s-subject-access-delegation/pkg/apis/authz/v1alpha1"
	logrus "github.com/sirupsen/logrus"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
)

// MockSubjectAccessDelegation is a mock of SubjectAccessDelegation interface
type MockSubjectAccessDelegation struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectAccessDelegationMockRecorder
}

// MockSubjectAccessDelegationMockRecorder is the mock recorder for MockSubjectAccessDelegation
type MockSubjectAccessDelegationMockRecorder struct {
	mock *MockSubjectAccessDelegation
}

// NewMockSubjectAccessDelegation creates a new mock instance
func NewMockSubjectAccessDelegation(ctrl *gomock.Controller) *MockSubjectAccessDelegation {
	mock := &MockSubjectAccessDelegation{ctrl: ctrl}
	mock.recorder = &MockSubjectAccessDelegationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubjectAccessDelegation) EXPECT() *MockSubjectAccessDelegationMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockSubjectAccessDelegation) Client() kubernetes.Interface {
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockSubjectAccessDelegationMockRecorder) Client() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Client))
}

// DestinationSubjects mocks base method
func (m *MockSubjectAccessDelegation) DestinationSubjects() []v1alpha1.DestinationSubject {
	ret := m.ctrl.Call(m, "DestinationSubjects")
	ret0, _ := ret[0].([]v1alpha1.DestinationSubject)
	return ret0
}

// DestinationSubjects indicates an expected call of DestinationSubjects
func (mr *MockSubjectAccessDelegationMockRecorder) DestinationSubjects() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestinationSubjects", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).DestinationSubjects))
}

// Kind mocks base method
func (m *MockSubjectAccessDelegation) Kind() string {
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockSubjectAccessDelegationMockRecorder) Kind() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Kind))
}

// Log mocks base method
func (m *MockSubjectAccessDelegation) Log() *logrus.Entry {
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Log indicates an expected call of Log
func (mr *MockSubjectAccessDelegationMockRecorder) Log() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Log))
}

// Name mocks base method
func (m *MockSubjectAccessDelegation) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockSubjectAccessDelegationMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Name))
}

// Namespace mocks base method
func (m *MockSubjectAccessDelegation) Namespace() string {
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace
func (mr *MockSubjectAccessDelegationMockRecorder) Namespace() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Namespace))
}

// OriginKind mocks base method
func (m *MockSubjectAccessDelegation) OriginKind() string {
	ret := m.ctrl.Call(m, "OriginKind")
	ret0, _ := ret[0].(string)
	return ret0
}

// OriginKind indicates an expected call of OriginKind
func (mr *MockSubjectAccessDelegationMockRecorder) OriginKind() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginKind", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).OriginKind))
}

// OriginName mocks base method
func (m *MockSubjectAccessDelegation) OriginName() string {
	ret := m.ctrl.Call(m, "OriginName")
	ret0, _ := ret[0].(string)
	return ret0
}

// OriginName indicates an expected call of OriginName
func (mr *MockSubjectAccessDelegationMockRecorder) OriginName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OriginName", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).OriginName))
}

// Triggers mocks base method
func (m *MockSubjectAccessDelegation) Triggers() []v1alpha1.EventTrigger {
	ret := m.ctrl.Call(m, "Triggers")
	ret0, _ := ret[0].([]v1alpha1.EventTrigger)
	return ret0
}

// Triggers indicates an expected call of Triggers
func (mr *MockSubjectAccessDelegationMockRecorder) Triggers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Triggers", reflect.TypeOf((*MockSubjectAccessDelegation)(nil).Triggers))
}
