// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joshvanl/k8s-subject-access-delegation/pkg/subject_access_delegation/interfaces (interfaces: DestinationSubjects)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/joshvanl/k8s-subject-access-delegation/pkg/subject_access_delegation/interfaces"
	reflect "reflect"
)

// MockDestinationSubjects is a mock of DestinationSubjects interface
type MockDestinationSubjects struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationSubjectsMockRecorder
}

// MockDestinationSubjectsMockRecorder is the mock recorder for MockDestinationSubjects
type MockDestinationSubjectsMockRecorder struct {
	mock *MockDestinationSubjects
}

// NewMockDestinationSubjects creates a new mock instance
func NewMockDestinationSubjects(ctrl *gomock.Controller) *MockDestinationSubjects {
	mock := &MockDestinationSubjects{ctrl: ctrl}
	mock.recorder = &MockDestinationSubjectsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDestinationSubjects) EXPECT() *MockDestinationSubjectsMockRecorder {
	return m.recorder
}

// ResolveDestinations mocks base method
func (m *MockDestinationSubjects) ResolveDestinations() error {
	ret := m.ctrl.Call(m, "ResolveDestinations")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveDestinations indicates an expected call of ResolveDestinations
func (mr *MockDestinationSubjectsMockRecorder) ResolveDestinations() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDestinations", reflect.TypeOf((*MockDestinationSubjects)(nil).ResolveDestinations))
}

// Subjects mocks base method
func (m *MockDestinationSubjects) Subjects() []interfaces.DestinationSubject {
	ret := m.ctrl.Call(m, "Subjects")
	ret0, _ := ret[0].([]interfaces.DestinationSubject)
	return ret0
}

// Subjects indicates an expected call of Subjects
func (mr *MockDestinationSubjectsMockRecorder) Subjects() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subjects", reflect.TypeOf((*MockDestinationSubjects)(nil).Subjects))
}
