// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/joshvanl/k8s-subject-access-delegation/pkg/subject_access_delegation/interfaces (interfaces: DestinationSubject)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDestinationSubject is a mock of DestinationSubject interface
type MockDestinationSubject struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationSubjectMockRecorder
}

// MockDestinationSubjectMockRecorder is the mock recorder for MockDestinationSubject
type MockDestinationSubjectMockRecorder struct {
	mock *MockDestinationSubject
}

// NewMockDestinationSubject creates a new mock instance
func NewMockDestinationSubject(ctrl *gomock.Controller) *MockDestinationSubject {
	mock := &MockDestinationSubject{ctrl: ctrl}
	mock.recorder = &MockDestinationSubjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDestinationSubject) EXPECT() *MockDestinationSubjectMockRecorder {
	return m.recorder
}

// Kind mocks base method
func (m *MockDestinationSubject) Kind() string {
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind
func (mr *MockDestinationSubjectMockRecorder) Kind() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockDestinationSubject)(nil).Kind))
}

// Name mocks base method
func (m *MockDestinationSubject) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockDestinationSubjectMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDestinationSubject)(nil).Name))
}

// ResolveDestination mocks base method
func (m *MockDestinationSubject) ResolveDestination() error {
	ret := m.ctrl.Call(m, "ResolveDestination")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveDestination indicates an expected call of ResolveDestination
func (mr *MockDestinationSubjectMockRecorder) ResolveDestination() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDestination", reflect.TypeOf((*MockDestinationSubject)(nil).ResolveDestination))
}
